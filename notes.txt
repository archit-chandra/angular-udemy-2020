# Creating New Project
ng new my-first-project-assignments

# Adding Bootstrap
npm install --save bootstrap@3

# Creating new component with CLI and nesting component
ng generate component servers
ng generate component servers --spec false

# Creating new directive
ng generate directive basic-highlight --spec false

# How Angular app gets loaded and started

index.html: <app-root>Loading...</app-root> - served single page
main.ts:
        bundled scripts imported by CLI at runtime - convenience function
        first code executed

	app.module.ts
		app.component.ts: selector: 'app-root'
			app.component.css
             app.component.html

# Component selectors
1. Element selector: selector: 'app-servers'
2. Attribute selector: selector: '[app-servers]'
3. Class selector: selector: '.app-servers'

# Data Binding
1. String Interpolation: {{...}} - 'String'/String reference/Method returning String
2. Property Binding: [property] = "data" - boolean/boolean reference/Method returning boolean
3. Event Binding: (event) = "expression" - expression is usually a handler method
4. Two way Binding: [(ngModel)] = "data"

- Property and Event binding can be done on:
        i.   HTML elements  - native properties and events
        ii.  Directives - custom properties and events
        iii. Angular created components - custom properties and events

# Directives
- are instructions in the DOM
- can be with/without template

- attributes directives: only affect the element they are added to
-- ngClass
   [ngClass]="{online: serverStatus === 'online', offline: serverStatus === 'offline'}"
-- ngStyle
   [ngStyle]="{backgroundColor:getColor()}"

- structural directives (*): change the structure of DOM around this element
                             2 structural directives can't be put on the same element. Only 1 allowed per element.
-- ngIf
   *ngIf="data" - boolean/boolean reference/Method returning boolean
-- ngFor
   *ngFor="let recipeItem of recipies"


# Debugging
- Use Sourcemaps
- Augury plugin


# View Encapsulation
- CSS applies to its own component only.
  (because Angular creates a shadow DOM for each component by appending an unique id to all its elements)

# Local Reference
- can be placed at any HTML element (not just input elements)
- reference represents the the HTML element (not just its value)
- can be used everywhere in the HTML template, but not in the typescript
- passed to typescript by methods

# ViewChild
- to obtain the value of element before we call the methods to pass the value from HTML to typescript
- no method required anymore
- ElementRef: Angular component
- should not change value of HTML element by ViewChild ElementRef

# ng-content
- everything placed between <> of the same component, its content will be lost when try to pass from another (parent) component.
- is directive (to hook in the component and show such content)
- useful to create widgets, when contents come from outside and property binding is not useful.

# Component lifecycle
- ngOnChanges: called after a bound input property changes/ receives new values (@Input)
               can be executed multiple times + when the component is created (after constructor)
- ngOnInIt: called once the component is initialized
            before DOM renders, after object is created
            runs after constructor
- ngDoCheck: called during every change detection runs (button click)
             actual change may/may not happen
             will be executed multiple times
             do min. change here, will cost performance
- ngAfterContentInit: called after projected content (by ng-content) has been projected to the view
                      (not the view of the component itself)
                      called only once.
- ngAfterContentChecked: called every time the projected content has been checked
                         usually after ngDoCheck()
- ngAfterViewInit: called after the component's view (and child views) has been initialized.
                   from here - can access the value inside the component elements
                   after DOM renders (for parent + children component)
- ngAfterViewChecked: called every time the view (+ child views) has been checked.
                      usually after ngDoCheck() & ngAfterContentChecked()
- ngOnDestroy: called once the component is about to destroy

# Service and DI
- when injecting a service to a component, all its child components also get the same instance of that service.
  the new instance of service can be provided to the child component by explicitly injecting the service to it.
  the new service instance will override the new service instance.
  (Hierarchical injection)
- AppModule is the highest parent component - (same service instance Application-wide)
  AppComponent - (same service instance for all its components, but not for other services)
- one service can be injected to other service (like Java)
  but it is only possible at the module level (not on component level)


# Routing
- "/servers" (absolute path)
-  "servers" (relative path) : appends the path specified in the router link
- can also use directory like path like "./servers", "../servers" (but don't use it)

# Observables
- various data sources
                  * user input events
                  * http requests
                  * triggered in code


# Observers
- monitor observables and handle data accordingly (our code)
                  * data handle (happy response)
                  * error handle
                  * completion handle (of observables, which may/may not complete [{button click}/{http request}])

- (subscribe): to be informed about the changes in data sent by observables
- (unsubscribe): to stop memory leaks because -
                 there are certain observables keeps on going (emitting values)
                 even if you are not interested in their values anymore.

- no need to unsubscribe when subscribing to observables by Angular. Angular destroys the subscription internally.

- observable stops once it throws error. (no more emitting values)
- observable is complete when everything is done by it without error (no more emitting values)

- Operators: receives data sent by observables
             make changes (eg. transform, filter etc.) https://www.learnrxjs.io/learn-rxjs/operators
             and then send to subscription

- Subject: are like observables, but it is more active because -
           we can call/emit (next()) from outside,
           i.e. can be triggered from user event (button)

           only used for cross component communication only via services on manual trigger


# Form handling

- ngModel : to let the input element(s) be the part of angular form json => form control
- name="...": to give the name of the form control


- dirty: when form control value is changed
- touched: when form control is accessed irrespective of whether its value is changed or not


# Pipes

- only change the display to the UI. The model remain the same
- https://angular.io/api?type=pipe
- when chaining pipes, order is important. Otherwise, errors are possible
- pipe does not re-run again if the data (pipe-input) changes for performance


- ng generate pipe shorten


# HTTP requests

- HTTP requests are only sent when subscribed.
- Services to be used for lifting (conversion, calculation), observables, subjects [+ subscribing to it]
  Components to be used for UI related items only
  +
  subscribing to the observables/subjects if that affects UI (and its related items)

# Error handling

- using Subjects when:
                      1. When observable + its subscription is defined in Service
                         & Component doesn't subscribe to the observable
                      2. When multiple places in application are interested to the observable outcome.


# Interceptors

- order matters for interceptors in the app.module

# Authentication

- https://firebase.google.com/docs/reference/rest/auth#section-create-email-password
- https://firebase.google.com/docs/reference/rest/auth#section-sign-in-email-password